<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>c++用类方法创建没有头节点的链表</title>
      <link href="2020/112333066.html"/>
      <url>2020/112333066.html</url>
      
        <content type="html"><![CDATA[<h2 id="c-使用类创建链表-（方法仅供参考）"><a href="#c-使用类创建链表-（方法仅供参考）" class="headerlink" title="c++使用类创建链表  （方法仅供参考）"></a>c++使用类创建链表  （方法仅供参考）</h2><h4 id="链表的话首先需要有一个关于节点的结构体或者类，在这里用类举例。"><a href="#链表的话首先需要有一个关于节点的结构体或者类，在这里用类举例。" class="headerlink" title="链表的话首先需要有一个关于节点的结构体或者类，在这里用类举例。"></a>链表的话首先需要有一个关于节点的结构体或者类，在这里用类举例。</h4><h5 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h5><pre class=" language-c++"><code class="language-c++">class Plnode&#123;public:    Plnode(); //无参构造函数，默认data为0，指针为空    void set(float m); //实例化后设置data    void set_Next(Plnode *ZZ); //指针改动    Plnode *get_point(); //获得节点指针域    float get_data(); //获得数据域private:    float data;    Plnode *Next;&#125;;</code></pre><h5 id="函数实现-："><a href="#函数实现-：" class="headerlink" title="函数实现 ："></a>函数实现 ：</h5><pre class=" language-c++"><code class="language-c++">Plnode::Plnode() //无参构造函数，默认data为0，指针为空    &#123;        data = 0;        Next = NULL;    &#125;void Plnode::set(float m) //实例化后设置data    &#123;        data = m;    &#125;void Plnode::set_Next(Plnode *ZZ) //指针改动    &#123;        Next = ZZ;    &#125;float Plnode::get_data() //获得数据域    &#123;        return data;    &#125;Plnode * Plnode::get_point() //获得节点指针域    &#123;        return Next;    &#125;</code></pre><h4 id="函数什么的可以自定义，数据最好放在私有变量中。因为在创建链表结点时，首先是在链表末尾节点添加，所以每创建一个新的节点时数据域为零，指针域为空。"><a href="#函数什么的可以自定义，数据最好放在私有变量中。因为在创建链表结点时，首先是在链表末尾节点添加，所以每创建一个新的节点时数据域为零，指针域为空。" class="headerlink" title="函数什么的可以自定义，数据最好放在私有变量中。因为在创建链表结点时，首先是在链表末尾节点添加，所以每创建一个新的节点时数据域为零，指针域为空。"></a>函数什么的可以自定义，数据最好放在私有变量中。因为在创建链表结点时，首先是在链表末尾节点添加，所以每创建一个新的节点时数据域为零，指针域为空。</h4><h4 id="节点类写完后，还需要写一个链表类来作为链表的头指针和链表的基本操作函数。"><a href="#节点类写完后，还需要写一个链表类来作为链表的头指针和链表的基本操作函数。" class="headerlink" title="节点类写完后，还需要写一个链表类来作为链表的头指针和链表的基本操作函数。"></a>节点类写完后，还需要写一个链表类来作为链表的头指针和链表的基本操作函数。</h4><h5 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h5><pre class=" language-c++"><code class="language-c++">class Linklist&#123;public:    Linklist(); //无参构造，默认linklist为空    Plnode *get_point(); //返回该头指针    float get_data(int n); //获得链表第n位的数据    void print_data(); //链表数据输出    void insert(float m, int n); //链表插入数据    void sort_data();//排序函数private:    Plnode *linklist;&#125;;</code></pre><h5 id="函数实现："><a href="#函数实现：" class="headerlink" title="函数实现："></a>函数实现：</h5><pre class=" language-c++"><code class="language-c++">Linklist::Linklist ()//无参构造，有默认值    &#123;        linklist = NULL;    &#125;Plnode * Linklist::get_point() //返回该头指针    &#123;        return linklist;    &#125;float Linklist::get_data(int n) //获得链表第n位的数据    &#123;        int j = 1;        Plnode *L = linklist;        while (L && j < n)        &#123;            L = L->get_point();            j++;        &#125;        if (!L)            return 0;        return L->get_data();    &#125;void Linklist::print_data() //链表数据输出    &#123;        Plnode *L = linklist;        while (L)        &#123;            cout << L->get_data() << " ";            L = L->get_point();        &#125;        cout << endl;    &#125;void Linklist::insert(float m, int n) //链表插入数据    &#123;        int j = 1;        Plnode *L = linklist;        Plnode *P = new Plnode;        P->set(m);        if (n == 0)        &#123;            P->set_Next(linklist);            linklist = P;        &#125;        else        &#123;            while (L && j < n)            &#123;                L = L->get_point();                j++;            &#125;            P->set_Next(L->get_point());            L->set_Next(P);        &#125;    &#125;void Linklist::sort_data()//排序函数    &#123;        Plnode *x1, *x2, *x3;        float t;        for (x1 = linklist; x1; x1 = x1->get_point())        &#123;            x3 = x1;            for (x2 = x1->get_point(); x2; x2 = x2->get_point())                if (x3->get_data() > x2->get_data())                    x3 = x2;            if (x3 != x1)            &#123;                t = x1->get_data();                x1->set(x3->get_data());                x3->set(t);            &#125;        &#125;    &#125;</code></pre><h4 id="遇到的问题-：创建节点时要使用new方法，才能生成链表后续节点，要不然插入函数完成后内存中节点内存会直接删除掉。"><a href="#遇到的问题-：创建节点时要使用new方法，才能生成链表后续节点，要不然插入函数完成后内存中节点内存会直接删除掉。" class="headerlink" title="遇到的问题 ：创建节点时要使用new方法，才能生成链表后续节点，要不然插入函数完成后内存中节点内存会直接删除掉。"></a>遇到的问题 ：创建节点时要使用new方法，才能生成链表后续节点，要不然插入函数完成后内存中节点内存会直接删除掉。</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/112216107.html"/>
      <url>2020/112216107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
